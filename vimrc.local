scriptencoding utf-8
" use vim syntax
set nocompatible

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vundle begin
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
source ~/.vim/vimrc.bundles
call vundle#end()

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => general
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set the line number
set number

" color theme
syntax enable
set t_Co=256
set background=dark
colorscheme seoul256

" more powerful backspacing
set backspace=indent,eol,start

" font
set guifont=Source\ Code\ Pro\ Semi-Bold

" 使用空格来替换Tab"
set expandtab

" 设置所有的Tab和缩进为4个空格"
set tabstop=2

" 设定<<和>>命令移动时的宽度为4"
set shiftwidth=2

" 使得按退格键时可以一次删除4个空格"
set softtabstop=2
set smarttab

" 缩进，自动缩进（继承前一行的缩进）"
" set autoindent 命令打开自动缩进，是下面配置的缩写
" 可使用autoindent命令的简写，即“:set ai”和“:set noai”
" 还可以使用“:set ai sw=4”在一个命令中打开缩进并设置缩进级别
set ai
set cindent

" 智能缩进
set si

" 自动换行
set wrap

" 设置软宽度
set sw=4

" 行内替换
set gdefault

" cursorline draws a horizontal highlight (or underline, depending on your colorscheme) on the line your cursor is currently on
set cursorline
hi cursorline guibg=#00ff00
hi CursorColumn guibg=#00ff00

" load filetype-specific indent files
filetype plugin indent on

" redraw only when we need to.
set lazyredraw

" set 7 lines to the cursor - when moving vertically using j/k
set so=7
set laststatus=2

" search setting
set ignorecase
set smartcase
set hlsearch
set incsearch

" for regular expressions turn magic on
set magic

" show matching brackets when text indicator is over them
set showmatch
" how many tenths of a second to blink when matching brackets
set mat=2

" files, backups and undo
" turn backup off
set nobackup
set nowb
set noswapfile

" 打开文件监视。如果在编辑过程中文件发生外部改变（比如被别的编辑器编辑了），就会发出提示。
set autoread

" 如果行尾有多余的空格（包括 Tab 键），该配置将让这些空格显示成可见的小方块
set listchars=tab:\|\ ,trail:■
set list

" 设置编码
set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936

"设置文件编码"
set fileencodings=utf-8

"设置终端编码"
set termencoding=utf-8

"设置语言编码"
set langmenu=zh_CN.UTF-8
set helplang=cn

" 增强模式中的命令行自动完成操作
set wildmenu

" 显示标尺
set ruler
set cursorline
set cursorcolumn

" smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


if has("autocmd")
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal g'\"" |
    \ endif
endif


" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin configure
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nerdtree
nmap <Leader>tree :NERDTreeFind<cr>
" nmap <F4> :NERDTreeToggle<cr>
" 自动打开
" autocmd vimenter * NERDTree
" 自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" indent
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
nmap <silent> <Leader>i <Plug>IndentGuidesToggle

" a.vim
" *.cpp 和 *.h 间切换
nmap <Leader>ch :A<CR>
" 子窗口中显示 *.cpp 或 *.h
nmap <Leader>sch :AV<CR>

" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

" ack
nnoremap <Leader>s :Ack!<Space>-i<Space>
nnoremap <Leader>f :Ack!<Space>-i<Space><cword>
if executable('ag')
    let g:ackprg = 'ag --nogroup --nocolor --column'
endif

"  tagbar
nmap <Leader>tag :TagbarToggle<CR>

" 切换缓存文件
nmap <C-n> :bn<CR>
nmap <C-b> :bp<CR>

" fzf
nmap <Leader>g :Files ~/QQMail/<CR>
nmap <Leader>p :Files<CR>
nmap <C-p> :Buffers<CR>


" fzf 默认布局
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

let &colorcolumn=join(range(121,999),",")
highlight ColorColumn ctermbg=235 guibg=#808069
highlight Search ctermbg=yellow ctermfg=black
" highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
" 新增的行
hi DiffAdd    ctermbg=235  ctermfg=108  guibg=#262626 guifg=#87af87 cterm=reverse gui=reverse
" 变化的行
hi DiffChange ctermbg=235  ctermfg=103  guibg=#262626 guifg=#8787af cterm=reverse gui=reverse
" 删除的行
hi DiffDelete ctermbg=235  ctermfg=131  guibg=#262626 guifg=#af5f5f cterm=reverse gui=reverse
" 变化的文字
hi DiffText   ctermbg=235  ctermfg=208  guibg=#262626 guifg=#ff8700 cterm=reverse gui=reverse

" YouCompleteMe 的配置
" Enable debugging
let g:ycm_keep_logfiles = 1
let g:ycm_log_level = 'debug'

" If the base settings don't repro, paste your existing config for YCM only, here:
" let g:ycm_....

" Load YCM (only)
let &rtp .= ',' . expand( '<sfile>:p:h' )
filetype plugin indent on

" Let clangd fully control code completion
let g:ycm_clangd_uses_ycmd_caching = 0
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.

" 改成你自己的 clangd 路径：
let g:ycm_clangd_binary_path = "/usr/local/clangd/bin/clangd"
let g:ycm_confirm_extra_conf = 0
let g:ycm_max_diagnostics_to_display = 50

" 一些传给 clangd 的命令行参数
let g:ycm_clangd_args = [ "--background-index", "-j=16", "--completion-style=detailed", "--header-insertion=iwyu", "--pch-storage=memory", "--cross-file-rename", "--enable-config", "--fallback-style=Google", "--pretty", "--suggest-missing-includes"]

" let g:ycm_enable_inlay_hints = 1
" let g:ycm_clear_inlay_hints_in_insert_mode = 1

" Apply YCM FixIt，把 F9 按键映射成 YcmCompleter FixIt 命令
map <F9> :YcmCompleter FixIt<CR>
map <F10> :YcmCompleter GoTo<CR>

" 让Vim的补全菜单行为与一般IDE一致
set completeopt=longest,menu
" 离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" 回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
